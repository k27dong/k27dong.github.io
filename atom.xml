<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kefan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ke-fan.me/"/>
  <updated>2019-02-22T18:06:49.833Z</updated>
  <id>https://ke-fan.me/</id>
  
  <author>
    <name>Kefan Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Miller-Rabin素性测试</title>
    <link href="https://ke-fan.me/2019/02/19/Miller-Rabin/"/>
    <id>https://ke-fan.me/2019/02/19/Miller-Rabin/</id>
    <published>2019-02-19T23:55:44.000Z</published>
    <updated>2019-02-22T18:06:49.833Z</updated>
    
    <content type="html"><![CDATA[<p><em>待续</em></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>RSA算法完全基于一个非常简明的数论事实：将两个大素数相乘十分容易，然而将他们的乘积分解却十分困难，其背后的原因在于素数分布的不可确定性。现在，唯一靠谱的寻找素数的方法也只是用超级计算机计算梅森素数：\(M_n=2^n-1\)。比如\(M_3 = 7\)， \(M_5 = 31\)都是素数，但是这种方法并不能保证算出来的数一定是素数，只是比纯一个一个试准确了一点，计算起来简单一点而已。比如\(M_{11} = 2047 = 23 \times 89 \)就不是素数。想要一次彻底解决这个问题，突破口在于黎曼\(\zeta\)函数。</p><p><img src="/images/riemman_zeta.jpg" alt="Zeta" title="Riemann Zeta Function" width="40%" height="40%"></p><p>按黎曼猜想所言，如果我们知道了黎曼\(\zeta\)函数的所有非平凡零点的精确位置，那么就有了计算素数计数函数的精确公式。即使无法预测精确位置，只是知道一些大致方向，或许也可以从此推断出素数分布的一些特性。然而自猜想提出已经过了160年，数学家依然在这个问题上束手无策。最近不断有传闻说某个教授又证明了黎曼猜想，但至今也没有一个明确的消息。</p><p>关于\(\zeta\)函数部分要展开过于漫长，我们先从一个更简单的问题开始讨论：给一个大整数N，如何判断其是否为素数？</p><p>在过去，这种问题远非人力可及，但如今的计算机提供了出路，简单到初学者也能写出来：写一个for loop，循环所有从2开始到floor(sqrt(N))的整数，如果任何一次循环的商也是整数，则N为合数，否则为质数，是为试除法。然而这种方法对小一点的数还有效，但是对于一个几百位的大数，就算电脑也很吃力。比如当N为<br><code>988744896957139511520127222779223595523279520709504309813645616473313737734468205080925749588688951322700157850487148987</code><br>时，两个质因数分别为：<br><code>751012796879096162041722690156315409567882051387805294268467</code><br>和<br><code>1316548667434112042529905157815899324199482096579536195817561</code><br>两个质因子都有60多位。一般的计算机对此已经无能为力，然而一般RSA1024的公钥都是上百位，后面还有更强大的RSA2048。可以说，在可视的很长一段时间内，RSA是无解的。</p><p>虽然这种方法行不通，数学家的想象力却是很丰富的，Miller-Robin测试就是一个可以快速判定大数素性的方法。但在正式开始之前，首先要写明几条引理。</p><h2 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h2><h3 id="二次探测定理"><a href="#二次探测定理" class="headerlink" title="二次探测定理"></a>二次探测定理</h3><p>\(p\,\)为素数，有</p><script type="math/tex; mode=display">x^2 \equiv 1 \;(mod \,p) \\\\(x+1)(x-1) \equiv 0 \;(mod \,p) \\\\x \equiv \pm 1 \; (mod\, p)</script><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>\(a\,\)为整数，\(p\,\)为素数，有</p><script type="math/tex; mode=display">a^p \equiv a\;(mod\,p)  \\\\a^{p-1} \equiv 1\;(mod\,p)</script><p>此处需要注意一点，即费马小定理是判断一个数是否为素数的必要条件，但不是充分条件。有一些“伪素数”也可以达成这个条件。比如</p><script type="math/tex; mode=display">2^{341-1} \equiv 1\;(mod\,341)  \\\\341 = 11 \times 31</script><h3 id="Fermat素性测试"><a href="#Fermat素性测试" class="headerlink" title="Fermat素性测试"></a>Fermat素性测试</h3><p>因为有上述情况的出现，人们引进了“伪素数”这个概念“。称满足\(\,a^{n-1} \equiv 1\;(mod\,n) \) 的和数\(n\)为“一个以\(\,a\,\)为底的伪素数”。<br>出于同样的原因，可以看出费马小定理在有些时候并不完全适用。但我们却可以通过多次测试来提高准确度。比如上图中，341通过了\(a=2\,\)的测试，但如果再次测试\(a=3\,\)，我们就可以看出它是一个合数。在前十亿个自然数中，只有1272个伪素数可以同时通过\(a\,\)为2和3的测试。这个几率是\( 0.001 \unicode{x2030}\)，已经非常小了。可以看出，用来测试的\(a\)越多，算法就会越准确。通常来说的做法是，随机选择数个\(\,a\,\)进行若干测试，如果每次都通过了测试，可判定这个数为素数。</p><p>然而漏网之鱼还是存在的。在某些情况下，即使选择了所有小于\(n\)并与其互素的底数\(a\)，这个数依旧可以通过所有的测试。<a href="https://en.wikipedia.org/wiki/Robert_Daniel_Carmichael" target="_blank" rel="noopener">Robert Carmichael</a>是第一个发现这种数的人，于是这种极端的伪素数也就被称为Carmichael数。违反直觉的是，这种数字并不是特别稀有，在上述的1200多个数里，有600多个都是Carmichael数。最小的一个仅为561。这种缺陷的存在，说明这种判断的严谨性尚有不足，需要一个更加完善的算法。<br><br></p><h2 id="Miller-Rabin-素性测试"><a href="#Miller-Rabin-素性测试" class="headerlink" title="Miller-Rabin 素性测试"></a>Miller-Rabin 素性测试</h2><p>苏联数学家M. M. Artjuhov在1966年首次提出了这个想法，然而不知道因为什么原因，并没有掀起什么波浪（wiki上也只有短短一句话说明）。直到十年后的1976年，Gary Miller才在他的PHD论文“Riemann’s Hypothesis and Tests for Primality”中独立地重新发现了这个理论。这个算法的正确性基于广义黎曼猜想，而这个猜想至今并未被证明（虽然极可能是正确的）。后来经过Michael Rabin（拉宾）的改造，变成了一个依赖于二次探测定理的非确定性算法。</p><h3 id="阐述"><a href="#阐述" class="headerlink" title="阐述"></a>阐述</h3><p>判断\(\,N\,\)是否是为素数：</p><ul><li>确定\(\,N\,\)是一个大于2的奇数</li><li>将\(\,N-1\,\)化为\(\,2^sd\,\)的形式（\(\,N-1\,\)为偶数，\(\,d\,\)为奇数）</li><li>随机选取整数\(\,a\in(0,\,N)\,\)</li><li>对所有整数\(\,r \in [0, \,s-1]\,\)进行运算：</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 判断 \(\,a^d\neq1  \;(mod \,N) \,\) </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 判断 \(\,a^{2^{r}d}\neq -1 \;(mod \,N)\,\) </li><li>若上述两个条件均符合，则称\(\,N\,\)通过Miller-Rabin测试。</li></ul><p>\(\,\bullet\,\)如果\(\,N\,\)不通过测试，则\(\,N\,\)一定为合数 <br> \(\,\bullet\,\)如果\(\,N\,\)通过测试，则\(\,N\,\)有\(\,\frac{3}{4}\,\)的几率为素数（误差率\(\,\le\frac{1}{4}\,\)）</p><p>在这个过程中只取了一次随机数\(\,a\,\)。类似于Fermat测试，通过重复取\(\,k\,\)次不同的随机值，准确率可以上升到\(\,1-(\frac{1}{4})^k\,\)。然而这也只是一个很保守的估计，实际效果要好得多。</p><h3 id="C-中的实现"><a href="#C-中的实现" class="headerlink" title="C++中的实现"></a>C++中的实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_probable_prime</span> <span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    assert (n &gt; <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, d;</span><br><span class="line">    <span class="keyword">bool</span> status = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> m = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  <span class="comment">// N-1 -&gt; (2^s)*d</span></span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            s++;</span><br><span class="line">            m /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            d = m;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;   <span class="comment">// check the primality k times</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> + (rand() % <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(n - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (is_composite(a, d, n, s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">// if the number passes all tests, it is most likely a prime number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if N is a composite number with base a</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_composite</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> d, <span class="keyword">int</span> n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">long</span> <span class="keyword">long</span>)(<span class="built_in">pow</span>((<span class="keyword">double</span>)a, (<span class="keyword">double</span>)d)) % n == <span class="number">1</span>) &#123;  <span class="comment">// (a^d)%n</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">long</span> <span class="keyword">long</span>)(<span class="built_in">pow</span>((<span class="keyword">double</span>)a, (<span class="built_in">pow</span>(<span class="number">2.0</span>, (<span class="keyword">double</span>)j) * d))) % n == n - <span class="number">1</span>) &#123;  <span class="comment">// (a^((2^i)*d))%n</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// up to this point N must be a composite number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个问题。在这个算法中要进行大量的指数运算，而C++自带的变量明显无法容纳这么大的数字，所以虽然程序逻辑是对的，但是如果真正跑起来，能检测的\(\,N\,\)并不会很大。可话虽如此，在真正的应用中，让电脑做乘法明显比一个数一个数试下来快的多。如果想进一步拓展这个程序的scope，可以用一些自定义的变量，在这里不再做进一步说明。</p><h3 id="大素数的生成"><a href="#大素数的生成" class="headerlink" title="大素数的生成"></a>大素数的生成</h3><p>有了上面这个方法，检测素数变得方便了很多。现在我们可以进一步说明如何生成一个大素数了。浅而易见的一个方法就是随机搜索。即随机产生一个大数，然后判断这个数的素性。但是这样明显很没有效率，有了这种工具之后，如何利用也是关键。一个效率较高的生成\(\,n\,\)位素数的过程如下（假设\(\,n\gt5\,\))：</p><ul><li>产生一个n位数的数\(\,p\,\)</li><li>确保最高位不为\(\,0\,\)</li><li>确保最低位只能为\(\,1\,\)，\(\,3\,\)，\(\,7\,\)，\(\,9\,\)</li><li>对\(\,p\,\)测试能否被10000以下的素数整除（共1228个）</li><li>对\(\,p\,\)进行数次Miller-Rabin测试 （5次测试的误差率已小于千分之一）</li><li>如果都通过，则可以认为\(\,p\,\)是素数</li></ul><h3 id="随机数的问题"><a href="#随机数的问题" class="headerlink" title="随机数的问题"></a>随机数的问题</h3><p>几乎上面所有的计算都涉及到了随机数，然而对于电脑来说，由于他的状态空间是恒定的，纯软件角度上的随机是不可能的。所有的软件归根结底都只是电路上的1和0，它没有“随便”的概念，只有非黑即白的“是”和“否”。因此随机产生的数，都不是真正意义上的随机数，而是通过某些算法算出来的“伪随机数”。但对于制造计算机的工程师来说，只要计算机生成的伪随机数可以解决实际问题，那就没必要陷入有关自由意志之类的无穷讨论中去。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;待续&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;RSA算法完全基于一个非常简明的数论事实：将两个大素数相乘十分容易，然而将他们的乘积分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Booklist 2019 (书单)</title>
    <link href="https://ke-fan.me/2019/02/14/Book/"/>
    <id>https://ke-fan.me/2019/02/14/Book/</id>
    <published>2019-02-14T19:01:09.000Z</published>
    <updated>2019-02-20T13:33:41.916Z</updated>
    
    <content type="html"><![CDATA[<p>Ongoing / 持续更新</p><blockquote><p>This page does not display well on mobile devices.</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th>Name</th><th style="text-align:center">Author</th><th style="text-align:center">Starting Date</th><th style="text-align:center">End Date</th><th style="text-align:center">Days</th><th>Note</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>袭击面包店</td><td style="text-align:center">村上春树</td><td style="text-align:center">01-07</td><td style="text-align:center">01-07</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">2</td><td>文学或者音乐</td><td style="text-align:center">余华</td><td style="text-align:center">/</td><td style="text-align:center">01-18</td><td style="text-align:center">/</td><td></td></tr><tr><td style="text-align:center">3</td><td>射雕英雄传</td><td style="text-align:center">金庸</td><td style="text-align:center">/</td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">4</td><td>Becoming</td><td style="text-align:center">Michelle Obama</td><td style="text-align:center">01-09</td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">5</td><td>Clean Architecture: A Craftsman’s Guide <br> to Software Structure and Design</td><td style="text-align:center">Robert C. Martin</td><td style="text-align:center">01-25</td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">6</td><td>流浪地球</td><td style="text-align:center">刘慈欣</td><td style="text-align:center">02-09</td><td style="text-align:center">02-09</td><td style="text-align:center">0</td><td></td></tr><tr><td style="text-align:center">7</td><td>我所理解的生活</td><td style="text-align:center">韩寒</td><td style="text-align:center">02-10</td><td style="text-align:center">02-11</td><td style="text-align:center">1</td><td></td></tr><tr><td style="text-align:center">8</td><td>围城</td><td style="text-align:center">钱锺书</td><td style="text-align:center">02-11</td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">9</td><td>可爱的洪水猛兽</td><td style="text-align:center">韩寒</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">10</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">11</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">12</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">13</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">14</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">15</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">16</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">17</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">18</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">19</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">20</td><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><!--|   21       |                                                                                    |                      |                   |              |          |          ||   22       |                                                                                    |                      |                   |              |          |          ||   23       |                                                                                    |                      |                   |              |          |          ||   24       |                                                                                    |                      |                   |              |          |          ||   25       |                                                                                    |                      |                   |              |          |          ||   26       |                                                                                    |                      |                   |              |          |          ||   27       |                                                                                    |                      |                   |              |          |          ||   28       |                                                                                    |                      |                   |              |          |          ||   29       |                                                                                    |                      |                   |              |          |          ||   30       |                                                                                    |                      |                   |              |          |          ||   31       |                                                                                    |                      |                   |              |          |          ||   32       |                                                                                    |                      |                   |              |          |          ||   33       |                                                                                    |                      |                   |              |          |          ||   34       |                                                                                    |                      |                   |              |          |          ||   35       |                                                                                    |                      |                   |              |          |          || TOTAL:     |                                                                                    |                      |                   |              |          |          |-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ongoing / 持续更新&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page does not display well on mobile devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;ta
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Display the Age of This Blog</title>
    <link href="https://ke-fan.me/2019/02/13/Display-the-Age-of-This-Blog/"/>
    <id>https://ke-fan.me/2019/02/13/Display-the-Age-of-This-Blog/</id>
    <published>2019-02-13T20:54:02.000Z</published>
    <updated>2019-02-20T04:55:53.652Z</updated>
    
    <content type="html"><![CDATA[<p>A little longer than a week ago I realized I need to have a personal website. After some thoughts I decided to make it a blog so that I can keep track of my work and accomplishment.</p><p>And here it is.</p><p>Thanks to the <a href="hexo.io">hexo</a> framework, it only took me one afternoon to get the site online, but the whole process of personalization took me few days.</p><p>As I am writing this sentence the blog has been running for about five days and I decided to add a counter where I’m able to record its age. The code is here, written in Javascript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate_time</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> running = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"02/08/2019 01:12:00"</span>); <span class="comment">// starting date</span></span><br><span class="line">    now.setTime(now.getTime() + <span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">    gap = now - running;</span><br><span class="line"></span><br><span class="line">    whole_days = <span class="built_in">Math</span>.floor(gap/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    whole_hours = <span class="built_in">Math</span>.floor(gap/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span> - (whole_days * <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">    whole_mins = <span class="built_in">Math</span>.floor(gap/<span class="number">1000</span>/<span class="number">60</span> - (whole_days * <span class="number">24</span> * <span class="number">60</span>) - (whole_hours * <span class="number">60</span>));</span><br><span class="line">    </span><br><span class="line">    whole_sec = <span class="built_in">Math</span>.round(gap/<span class="number">1000</span> - (whole_days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>) - (whole_hours * <span class="number">60</span> * <span class="number">60</span>) - (whole_mins * <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">String</span>(whole_hours).length == <span class="number">1</span>)&#123;</span><br><span class="line">        whole_hours = <span class="string">"0"</span> + whole_hours;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">String</span>(whole_mins).length == <span class="number">1</span>) &#123;</span><br><span class="line">        whole_mins = <span class="string">"0"</span> + whole_mins;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">String</span>(whole_sec).length == <span class="number">1</span>) &#123;</span><br><span class="line">        whole_sec = <span class="string">"0"</span> + whole_sec;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"time_loading"</span>).innerHTML = <span class="string">"Running  "</span> + whole_days + <span class="string">" days "</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = whole_hours + <span class="string">":"</span> + whole_mins + <span class="string">":"</span> + whole_sec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(<span class="string">"calculate_time()"</span>,<span class="number">250</span>);</span><br></pre></td></tr></table></figure><p>To display it in the footer, this piece of code is put in <code>theme/next/layout/_partials/footer.swig</code>, with some additional code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-coffee"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"time_loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Code Above --&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now the time is displayed in the footer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A little longer than a week ago I realized I need to have a personal website. After some thoughts I decided to make it a blog so that I c
      
    
    </summary>
    
      <category term="javascript" scheme="https://ke-fan.me/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>关于博客</title>
    <link href="https://ke-fan.me/2019/02/11/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    <id>https://ke-fan.me/2019/02/11/关于博客/</id>
    <published>2019-02-11T17:50:29.000Z</published>
    <updated>2019-02-22T18:17:28.061Z</updated>
    
    <content type="html"><![CDATA[<p>之前也写过一些文章，大部分是写给自己的，因为文笔太差，没脸给别人看。产量也很随意，可能一天写完，也可能一个月不动笔，数量和质量全看心情。</p><p>那时候的想法是先在新浪或者CSDN上面练练手，等有了一些能力之后再去想办法自己搭一个。然而时不我待，实习的公司正好在做类似的东西，于是趁着白天上班的间隙，在老板不在的时候，东拼西凑，弄出来这么一个东西。</p><p>必须承认，搭建博客的过程无异于土法炼钢。充满了各种自学实验，无师自通。整个创作过程充斥着尝试和搜刮而来的教学视频。当然也遇到了各种不明不白的技术问题，后来这些问题也被同样不明不白地解决了。</p><p>至于博客本身，在进入智能时代之后，虽然还没有像写信一样死得那么彻底，但也差不多了。最初看博客的时候，还得追溯到拨号上网的时代，看的最多的是韩寒。那时候还没有营销号的概念，事情还比较简单。后来韩少更新的越来越少了，我也就忘了。然而博客并没有真正死掉，只是变成了公众号，变成了微博。文章越来越短，内容越来越杂。上网变得方便了，可时间也变少了。每天下班之后仅剩的几个小时还要被割成无数碎片，来回扒拉几下也就所剩无几。什么都是来得快去得也快，几个小时不看朋友圈就感觉和世界脱节了，断网几天就感觉被人类抛弃了。</p><p>暑假飞回北京，这种感觉尤其强烈。面对着包邮，外卖，支付宝，我感觉自己像是刚从一个时空胶囊里出来一样，很多东西在我脑中还没有名字，提到的时候尚需指指点点。最大的冲击来自流量，我从来不知道一个人可以有这么多流量，国内的朋友可能很难想象一个月1G流量是什么概念。在北京，衣食住行，一切问题都可以用手机解决，一切事情都和网络有关。</p><p>回老家之后，情况才得到缓解。那是一个只有几条铁路的小城。打车五块起步，豆腐脑三块一碗，买东西还可以用现金。看着这些东西没有因为时代的变化而消亡，也不知道对家乡是好事还是坏事。</p><p>晚上喝酒是少不了的，老家亲戚多，敬酒词储备永远不足，回家基本是后半夜的事。东北那边网不好，晚上经常没信号。断网之后，倒时差的夜晚是一种煎熬。我躺在床上，酒意未消，翻来覆去却也睡不着，唯一能做的事情就是透过窗户看着星空。无论街上多么嘈杂，天空永远如海底一般静谧，这时候我会感觉自己又回到了自己小时候住的老房里。你以为我要开始怀念那个纯真朴实的年代了么，不，我心里竟然想的是我手机里原本有一个分辨星座的软件，这时候应该能派上用场的，不过因为要给淘宝腾地方，被我给删了。</p><p>然而我们必须记得，在我们的大部分人生里，智能手机是没有的，互联网是不存在的。虽然从现在看来，那样的生活应该很无聊。但那时候的人们也会觉得上一代很无聊，因为他们不止没有电视，甚至没有电。同样的，再过十几年也会有人拿起我们今天用的苹果电脑，然后不屑的问，这是哪年的古董系统。</p><p>但我想，总有一些事情，就像老家楼下的豆腐脑一样，是无法被时间所左右的。临走的早上，我去问老板娘，怎么还这么便宜啊。她接过我递给他的三张纸币，然后说，一直就这样。</p><p>这甚至算不上一个答案，但事实就是如此。并不是因为它的构造多么复杂，而是因为它代表的是最本质的东西，而本质的东西是不会改变的。</p><p>在日理万机的今天，曾经简单的事情，全变复杂了，复杂的事情，全被简单处理了。有时候我在想，是不是博客这个东西已经过时了，没人看了。放眼望去，曾经那些博主如今大多销声匿迹，剩下的也转了平台。而私人文章也几乎不存在了，现在都在冲着别人说话。后来发现，其实这并不是一个问题。因为写就写了，别人看不看并不是那么重要，别人理不理解也不是很重要。如果真的有人问的话，我也只能说是因为我想。好像很多事情都是这样的，做与不做看起来并不会带来多大的变化，但一件事必有它存在的理由。比如那些登山爱好者，那些山脉爬不爬都一样，你去问他们为什么爬，答案是因为山就在那里。</p><p>总而言之，并不是出于怀念，也不是为了情怀，只是因为活着就有记录的必要。要不然日子过的就像水龙头一样，拧开开关，哗啦啦的都进了下水道。尤其是在这个一切越来越快的时代，总是一不留神就又到了周末，仿佛这周还没开始就结束了。但究其原因，主要原因是因为我懒。如果周末没计划，真是活的比废物还废物。以前还得起床看小神龙俱乐部，现在是微信知乎微博虎扑，一个完美的互联网闭环，床上一窝，不知今夕是何年。</p><p>科技的进步为生活带来无数可能性，人们都在追求“不一样”。今年游轮出海，明年北欧跨年。白天大鱼大肉，晚上天上人间。城市里的人们普遍都有钱一点了，生理需求和安全需求满足了，便开始追逐更高层次的享受。坚持一件事情好像是越来越难了，因为有太多的事情等着我们去做了，而娱乐的成本也小了很多，于是我们就在这时代银行的枪林弹雨中筋疲力尽。每天下班之后瘫倒在床上，我也会想到在地球的另一头，肯定有一对夫妇正端着他们的豆腐和卤准备上街。对他们来说，并不是因为要追求什么虚无缥缈的东西，而只是因为这件事有它存在的必要性，我想这就够了，操心太多其他的事情是没有意思的。</p><p>我想很多人都有过日记本，里面那些半途而废的，不知所终的幻想，那些对未来的憧憬与渴望如今全变成了的生活的麻烦。现在我决定把这些麻烦重新整理起来。</p><p>这本来应该是一个纯技术向的博客，但我还是希望非技术向的文章能多一些。因为技术是人生存所依赖的，却不是人的精神能依凭的；它是生存的方法，而不是生存的法则。科学是一个很小的东西，并不像人们所寄望的那样可以无所不能。这是顾城说的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前也写过一些文章，大部分是写给自己的，因为文笔太差，没脸给别人看。产量也很随意，可能一天写完，也可能一个月不动笔，数量和质量全看心情。&lt;/p&gt;
&lt;p&gt;那时候的想法是先在新浪或者CSDN上面练练手，等有了一些能力之后再去想办法自己搭一个。然而时不我待，实习的公司正好在做类似
      
    
    </summary>
    
      <category term="other" scheme="https://ke-fan.me/categories/other/"/>
    
    
  </entry>
  
</feed>
